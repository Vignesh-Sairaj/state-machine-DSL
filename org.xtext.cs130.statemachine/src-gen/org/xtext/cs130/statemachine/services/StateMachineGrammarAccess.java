/*
 * generated by Xtext 2.20.0
 */
package org.xtext.cs130.statemachine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVardefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVardefsVariablesParserRuleCall_3_0 = (RuleCall)cVardefsAssignment_3.eContents().get(0);
		private final Assignment cEventdefsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventdefsEventsParserRuleCall_4_0 = (RuleCall)cEventdefsAssignment_4.eContents().get(0);
		private final Assignment cStatedefsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatedefsStatesParserRuleCall_5_0 = (RuleCall)cStatedefsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateMachine:
		//	'statemachine' name=ID '{'
		//	vardefs=Variables
		//	eventdefs=Events
		//	statedefs=States
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'statemachine' name=ID '{' vardefs=Variables eventdefs=Events statedefs=States '}'
		public Group getGroup() { return cGroup; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//vardefs=Variables
		public Assignment getVardefsAssignment_3() { return cVardefsAssignment_3; }
		
		//Variables
		public RuleCall getVardefsVariablesParserRuleCall_3_0() { return cVardefsVariablesParserRuleCall_3_0; }
		
		//eventdefs=Events
		public Assignment getEventdefsAssignment_4() { return cEventdefsAssignment_4; }
		
		//Events
		public RuleCall getEventdefsEventsParserRuleCall_4_0() { return cEventdefsEventsParserRuleCall_4_0; }
		
		//statedefs=States
		public Assignment getStatedefsAssignment_5() { return cStatedefsAssignment_5; }
		
		//States
		public RuleCall getStatedefsStatesParserRuleCall_5_0() { return cStatedefsStatesParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariablesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarsVariableParserRuleCall_3_0 = (RuleCall)cVarsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variables:
		//	{Variables} 'variables' '{'
		//	vars+=Variable*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Variables} 'variables' '{' vars+=Variable* '}'
		public Group getGroup() { return cGroup; }
		
		//{Variables}
		public Action getVariablesAction_0() { return cVariablesAction_0; }
		
		//'variables'
		public Keyword getVariablesKeyword_1() { return cVariablesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//vars+=Variable*
		public Assignment getVarsAssignment_3() { return cVarsAssignment_3; }
		
		//Variable
		public RuleCall getVarsVariableParserRuleCall_3_0() { return cVarsVariableParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	'variable' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EventsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.Events");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Events:
		//	{Events} 'events' '{'
		//	events+=Event*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Events} 'events' '{' events+=Event* '}'
		public Group getGroup() { return cGroup; }
		
		//{Events}
		public Action getEventsAction_0() { return cEventsAction_0; }
		
		//'events'
		public Keyword getEventsKeyword_1() { return cEventsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//events+=Event*
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//	'event' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStartStateCrossReference_3_0 = (CrossReference)cStartAssignment_3.eContents().get(0);
		private final RuleCall cStartStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStartStateCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//States:
		//	'states' '{'
		//	'start' start=[State] ';'
		//	states+=State+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'states' '{' 'start' start=[State] ';' states+=State+ '}'
		public Group getGroup() { return cGroup; }
		
		//'states'
		public Keyword getStatesKeyword_0() { return cStatesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'start'
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }
		
		//start=[State]
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }
		
		//[State]
		public CrossReference getStartStateCrossReference_3_0() { return cStartStateCrossReference_3_0; }
		
		//ID
		public RuleCall getStartStateIDTerminalRuleCall_3_0_1() { return cStartStateIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//states+=State+
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//State:
		//	'state' name=ID '{'
		//	transitions+=Transition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID '{' transitions+=Transition* '}'
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_0() { return cTransitionsTransitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		
		//Transition:
		//	'on' event=[Event] ('if' condition=Condition)? '=>' target=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//'on' event=[Event] ('if' condition=Condition)? '=>' target=[State]
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//event=[Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
		
		//('if' condition=Condition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_1_0() { return cConditionConditionParserRuleCall_2_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//target=[State]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_4_0_1() { return cTargetStateIDTerminalRuleCall_4_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpCOMPTerminalRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//	'{' variable=[Variable] op=COMP value=INT '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' variable=[Variable] op=COMP value=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_0_1; }
		
		//op=COMP
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//COMP
		public RuleCall getOpCOMPTerminalRuleCall_2_0() { return cOpCOMPTerminalRuleCall_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final VariablesElements pVariables;
	private final VariableElements pVariable;
	private final EventsElements pEvents;
	private final EventElements pEvent;
	private final StatesElements pStates;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final ConditionElements pCondition;
	private final TerminalRule tCOMP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pVariables = new VariablesElements();
		this.pVariable = new VariableElements();
		this.pEvents = new EventsElements();
		this.pEvent = new EventElements();
		this.pStates = new StatesElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pCondition = new ConditionElements();
		this.tCOMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cs130.statemachine.StateMachine.COMP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.cs130.statemachine.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	'statemachine' name=ID '{'
	//	vardefs=Variables
	//	eventdefs=Events
	//	statedefs=States
	//	'}';
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//Variables:
	//	{Variables} 'variables' '{'
	//	vars+=Variable*
	//	'}';
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//Variable:
	//	'variable' name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Events:
	//	{Events} 'events' '{'
	//	events+=Event*
	//	'}';
	public EventsElements getEventsAccess() {
		return pEvents;
	}
	
	public ParserRule getEventsRule() {
		return getEventsAccess().getRule();
	}
	
	//Event:
	//	'event' name=ID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//States:
	//	'states' '{'
	//	'start' start=[State] ';'
	//	states+=State+
	//	'}';
	public StatesElements getStatesAccess() {
		return pStates;
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}
	
	//State:
	//	'state' name=ID '{'
	//	transitions+=Transition*
	//	'}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	'on' event=[Event] ('if' condition=Condition)? '=>' target=[State];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Condition:
	//	'{' variable=[Variable] op=COMP value=INT '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//terminal COMP:
	//	'==' | '!=' | '<' | '>' | '<=' | '>=';
	public TerminalRule getCOMPRule() {
		return tCOMP;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
