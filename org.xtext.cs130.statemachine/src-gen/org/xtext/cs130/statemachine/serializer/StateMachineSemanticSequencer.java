/*
 * generated by Xtext 2.20.0
 */
package org.xtext.cs130.statemachine.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.cs130.statemachine.services.StateMachineGrammarAccess;
import org.xtext.cs130.statemachine.stateMachine.Condition;
import org.xtext.cs130.statemachine.stateMachine.Event;
import org.xtext.cs130.statemachine.stateMachine.Events;
import org.xtext.cs130.statemachine.stateMachine.State;
import org.xtext.cs130.statemachine.stateMachine.StateMachine;
import org.xtext.cs130.statemachine.stateMachine.StateMachinePackage;
import org.xtext.cs130.statemachine.stateMachine.States;
import org.xtext.cs130.statemachine.stateMachine.Transition;
import org.xtext.cs130.statemachine.stateMachine.Variable;
import org.xtext.cs130.statemachine.stateMachine.Variables;

@SuppressWarnings("all")
public class StateMachineSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StateMachineGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StateMachinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StateMachinePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case StateMachinePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StateMachinePackage.EVENTS:
				sequence_Events(context, (Events) semanticObject); 
				return; 
			case StateMachinePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case StateMachinePackage.STATE_MACHINE:
				sequence_StateMachine(context, (StateMachine) semanticObject); 
				return; 
			case StateMachinePackage.STATES:
				sequence_States(context, (States) semanticObject); 
				return; 
			case StateMachinePackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case StateMachinePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case StateMachinePackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (variable=[Variable|ID] op=COMP value=INT)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.CONDITION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.CONDITION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.CONDITION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.CONDITION__OP));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getVariableVariableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(StateMachinePackage.Literals.CONDITION__VARIABLE, false));
		feeder.accept(grammarAccess.getConditionAccess().getOpCOMPTerminalRuleCall_2_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.EVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Events returns Events
	 *
	 * Constraint:
	 *     events+=Event*
	 */
	protected void sequence_Events(ISerializationContext context, Events semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateMachine returns StateMachine
	 *
	 * Constraint:
	 *     (name=ID vardefs=Variables eventdefs=Events statedefs=States)
	 */
	protected void sequence_StateMachine(ISerializationContext context, StateMachine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__NAME));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__VARDEFS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__VARDEFS));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__EVENTDEFS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__EVENTDEFS));
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__STATEDEFS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.STATE_MACHINE__STATEDEFS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateMachineAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStateMachineAccess().getVardefsVariablesParserRuleCall_3_0(), semanticObject.getVardefs());
		feeder.accept(grammarAccess.getStateMachineAccess().getEventdefsEventsParserRuleCall_4_0(), semanticObject.getEventdefs());
		feeder.accept(grammarAccess.getStateMachineAccess().getStatedefsStatesParserRuleCall_5_0(), semanticObject.getStatedefs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID transitions+=Transition*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     States returns States
	 *
	 * Constraint:
	 *     (start=[State|ID] states+=State+)
	 */
	protected void sequence_States(ISerializationContext context, States semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (event=[Event|ID] condition=Condition? target=[State|ID])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachinePackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachinePackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     vars+=Variable*
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
